# Define a function to calculate factorial
factorial <- function(n) {
if (n == 0 || n == 1) {
return(1)
} else {
return(n * factorial(n - 1))
}
}
# Calculate the expression
result <- factorial(8) / (factorial(4) * factorial(4))
# Print the result
print(result)
# Calculate the expression
pod_combination <- factorial(8) / (factorial(4) * factorial(4))
# Calculate the probability of the 2 top players to end up in the same pod.
top_player_combination <- factorial(8)/ (factorial(6) * factorial(2))
# Print the result
print(top_player_combination/pod_combination)
# Print the result
print(top_player_combination/pod_combination)*100
View(factorial)
View(factorial)
# Calculate the pod of 4 possible combinations for top 8 players.
pod_combination <- factorial(8) / (factorial(4) * factorial(4))
# Print the result
print(top_player_combination/pod_combination)*100
View(factorial)
View(factorial)
# Calculate permutations for top 8 players from pool of 50 players.
# 50!/(50-8)!
# 50!/(42)!
# 50!/42!
top_8_permutations <- factorial(50)/factorial(50-8)
print(top_8_permutations)
# %rank = [6+0.5/20]*100
# %rank = [6.5/20]*100
# %rank = [0.325]*100
# %rank = 32.5%
percent_rank <- ((6+0.5)/20)*100
print(percent_rank)
test <- factorial(5)/ (factorial(2) * factorial(3))
test <- factorial(9)/factorial(9-3)
test <- factorial(9) / (factorial(6) * factorial(3))
test <- ((15+0.5)/60)*100
test <- ((14+0.5)/60)*100
factorial(7)
test <- factorial(5)/factorial(5-2)
## Odds of picking the first "Sigil of Solace"
first_sigil <- 3/60
## 0.05
second_sigil <- 2/59
## 0.033
two_sigils <- first_sigil * second_sigil
## 0.033
two_sigils <- (first_sigil * second_sigil) * 100
## 0.033
two_sigils <- (first_sigil * second_sigil) * 100
print(two_sigils)
########
## Independent Events
########
# Find the probability that two dice come up "one" when rolled.
# Probability of the first dice coming up "one".
first_dice <- 1/6
## 0.16
second_dice <- 1/6
## 0.16
## 16%
both_dice <- (first_dice * second_dice) * 100
print(both_dice)
hs_dropout_prob <- (0.05)(0.60)/(0.05*0.60)+(0.15)+(0.60)+(0.20)
hs_dropout_prob <- (0.05)(0.60)/(0.05*0.60)+0.15+0.60+0.20
hs_dropout_prob <- (0.05 * 0.60)/(0.05*0.60)+0.15+0.60+0.20
print(hs_dropout_prob)
hs_dropout_prob_earned <- (0.05 * 0.60)/(0.05*0.60)+(0.15*0.80)+(0.60*0.80)+(0.20*0.85)
print(hs_dropout_prob_earned)
hs_dropout_prob_earned <- (0.05 * 0.60)/(0.05*0.60)+(0.15*0.80)+(0.60*0.80)+(0.15*0.85)
print(hs_dropout_prob_earned)
# Calculate hs_dropout_prob_earned
hs_dropout_prob_earned <- (0.05 * 0.60) / ((0.05 * 0.60) + (0.15 * 0.80) + (0.60 * 0.80) + (0.15 * 0.85))
# Print the result
print(hs_dropout_prob_earned)
# Print the result
print(hs_dropout_prob_earned)
# Calculate probability of Dromai winning the pro tour with this current meta.
dromai_win_prob <- (0.40 * 0.20) / ((0.40 * 0.20) + (0.20 * 0.30) + (0.20 * 0.20) + (0.10 * 0.20) + (0.10 * 0.10))
print(dromai_win_prob)
dromai <- c(0.40, 0.20)
kayo <- c(0.20, 0.30)
victor <- c(0.20, 0.20)
katsu <- c(0.10, 0.20)
kassai <- c(0.10, 0.10)
dromai_win_probability <- (dromai[1])
dromai_win_probability <- (dromai[1] * dromai[2]) / ((dromai[1] * dromai[2]) + (kayo[1] * kayo[2]) + (victor[1] * victor[2]) + (katsu[1] * katsu[2]) + (kassai[1] * kassai[2]))
print(dromai_win_probability)
# Define hero data as a list of vectors
heroes <- list(
dromai = c(0.40, 0.20),
kayo = c(0.20, 0.30),
victor = c(0.20, 0.20),
katsu = c(0.10, 0.20),
kassai = c(0.10, 0.10)
)
# Calculate dromai's win probability
dromai_win_probability <- with(heroes, {
num <- dromai[1] * dromai[2]
denom <- sum(sapply(heroes, function(hero) hero[1] * hero[2]))
num / denom
})
# Print the result
print(dromai_win_probability)
# Kayo win probability.
kayo_win_probability <- with(heroes, {
num <- kayo[1] * kayo[2]
denom <- sum(sapply(heroes, function(hero) hero[1] * hero[2]))
num / denom
})
print(kayo_win_probability)
# Print the result
print(dromai_win_probability)
# Define hero data as a list of vectors
heroes <- list(
dromai = c(0.40, 0.20),
kayo = c(0.20, 0.30),
victor = c(0.20, 0.20),
katsu = c(0.10, 0.20),
kassai = c(0.10, 0.10)
)
calculate_win_probability <- function(hero_data, all_heroes) {
num <- hero_data[1] * hero_data[2]
denom <- sum(sapply(all_heroes, function(hero) hero[1] * hero[2]))
return(num / denom)
for (hero_name in names(heroes)) {
win_prob <- calculate_win_probability(heroes[[hero_name]], heroes)
cat(hero_name, "win probability:", win_prob, "\n")
}
# Calculate and print win probability for each hero
for (hero_name in names(heroes)) {
win_prob <- calculate_win_probability(heroes[[hero_name]], heroes)
print(hero_name, "win probability:", win_prob, "\n")
}
# Calculate and print win probability for each hero
for (hero_name in names(heroes)) {
win_prob <- calculate_win_probability(heroes[[hero_name]], heroes)
cat(hero_name, "win probability:", win_prob, "\n")
}
# Define hero data as a list of vectors
heroes <- list(
dromai = c(0.40, 0.20),
kayo = c(0.20, 0.30),
victor = c(0.20, 0.20),
katsu = c(0.10, 0.20),
kassai = c(0.10, 0.10)
)
# Function to calculate win probability for a given hero
calculate_win_probability <- function(hero_data, all_heroes) {
num <- hero_data[1] * hero_data[2]
denom <- sum(sapply(all_heroes, function(hero) hero[1] * hero[2]))
return(num / denom)
}
# Print the results for each hero's win probability
for (hero_name in names(heroes)) {
win_prob <- calculate_win_probability(heroes[[hero_name]], heroes)
print(paste(hero_name, "win probability:", win_prob))
}
# Print the results for each hero's win probability
for (hero_name in names(heroes)) {
win_prob <- calculate_win_probability(heroes[[hero_name]], heroes)
print(paste(hero_name, "win probability:", win_prob))
}
View(heroes)
# Define hero data as a list of vectors
heroes <- list(
dromai = c(0.40, 0.20),
kayo = c(0.20, 0.30),
victor = c(0.20, 0.20),
katsu = c(0.10, 0.20),
kassai = c(0.10, 0.10)
)
# Function to calculate win probability for a given hero
calculate_win_probability <- function(hero_data, all_heroes) {
num <- hero_data[1] * hero_data[2]
denom <- sum(sapply(all_heroes, function(hero) hero[1] * hero[2]))
return(num / denom)
}
# Print the results for each hero's win probability
for (hero_name in names(heroes)) {
win_prob <- calculate_win_probability(heroes[[hero_name]], heroes)
cat(hero_name, "win probability:", win_prob, "\n")
}
# Print the results for each hero's win probability
for (hero_name in names(heroes)) {
win_prob <- calculate_win_probability(heroes[[hero_name]], heroes)
cat(hero_name, "win probability:", win_prob, "\n")
}
# Define hero data as a list of vectors
heroes <- list(
dromai = c(0.40, 0.20),
kayo = c(0.20, 0.30),
victor = c(0.20, 0.20),
katsu = c(0.10, 0.20),
kassai = c(0.10, 0.10)
)
# Function to calculate win probability for a given hero
calculate_win_probability <- function(hero_data, all_heroes) {
num <- hero_data[1] * hero_data[2]
denom <- sum(sapply(all_heroes, function(hero) hero[1] * hero[2]))
return(num / denom)
}
# Print the results for each hero's win probability
for (hero_name in names(heroes)) {
win_prob <- calculate_win_probability(heroes[[hero_name]], heroes)
print(paste(hero_name, "win probability:", win_prob))
}
# Print the results for each hero's win probability
for (hero_name in names(heroes)) {
win_prob <- calculate_win_probability(heroes[[hero_name]], heroes)
print(paste(hero_name, "win probability:", win_prob))
}
print(paste(hero_name, "win probability:", win_prob))
# Print the results for each hero's win probability
for (hero_name in names(heroes)) {
win_prob <- calculate_win_probability(heroes[[hero_name]], heroes)
print(paste(hero_name, "win probability:", win_prob))
}
# Print the results for each hero's win probability
for (hero_name in names(heroes)) {
win_prob <- calculate_win_probability(heroes[[hero_name]], heroes)
cat(hero_name, "win probability:", win_prob)
}
win_prob <- calculate_win_probability(heroes[["dromai"]], heroes)
print(paste("Dromai win probability:", win_prob))
print(paste("Dromai win probability:", win_prob))
for (hero_name in names(heroes)) {
win_prob <- calculate_win_probability(heroes[[hero_name]], heroes)
cat(hero_name, "win probability:", win_prob, "\n")
}
for (hero_name in names(heroes)) {
win_prob <- calculate_win_probability(heroes[[hero_name]], heroes)
cat(hero_name, "win probability:", win_prob, "\n")
}
for (hero_name in names(heroes)) {
win_prob <- calculate_win_probability(heroes[[hero_name]], heroes)
cat(hero_name, "win probability:", win_prob, "\n")
}
print(paste("Dromai win probability:", win_prob))
win_prob <- calculate_win_probability(heroes[["dromai"]], heroes)
print(paste("Dromai win probability:", win_prob))
print(paste("Dromai win probability:", win_prob))
calculate_win_probability(2,6)
testing_this <- calculate_win_probability(2,6)
print(testing_this)
# Print the results for each hero's win probability
for (hero_name in names(heroes)) {
win_prob <- calculate_win_probability(heroes[[hero_name]], heroes)
cat(hero_name, "win probability:", win_prob)
}
# Define hero data as a list of vectors
heroes <- list(
dromai = c(0.40, 0.20),
kayo = c(0.20, 0.30),
victor = c(0.20, 0.20),
katsu = c(0.10, 0.20),
kassai = c(0.10, 0.10)
)
# Function to calculate win probability for a given hero
calculate_win_probability <- function(hero_data, all_heroes) {
num <- hero_data[1] * hero_data[2]
denom <- sum(sapply(all_heroes, function(hero) hero[1] * hero[2]))
return(num / denom)
}
# Print the results for each hero's win probability
for (hero_name in names(heroes)) {
win_prob <- calculate_win_probability(heroes[[hero_name]], heroes)
cat(hero_name, "win probability:", win_prob)
}
# Define hero data as a list of vectors
heroes <- list(
dromai = c(0.40, 0.20),
kayo = c(0.20, 0.30),
victor = c(0.20, 0.20),
katsu = c(0.10, 0.20),
kassai = c(0.10, 0.10)
)
# Function to calculate win probability for a given hero
calculate_win_probability <- function(hero_data, all_heroes) {
num <- hero_data[1] * hero_data[2]
denom <- sum(sapply(all_heroes, function(hero) hero[1] * hero[2]))
return(num / denom)
}
# Print the results for each hero's win probability
for (hero_name in names(heroes)) {
win_prob <- calculate_win_probability(heroes[[hero_name]], heroes)
cat(hero_name, "win probability:", win_prob)
}
# Print the results for each hero's win probability
for (hero_name in names(heroes)) {
win_prob <- calculate_win_probability(heroes[[hero_name]], heroes)
cat(hero_name, "win probability:", win_prob, "\n")
}
